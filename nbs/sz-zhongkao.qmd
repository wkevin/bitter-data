---
title: "深圳中考"

format:
  html:
    code-fold: false
    echo: false
    output: false
    toc-expand: 2
    toc-title: 目录
    # fig-xxx 仅影响 matplotlib 绘图，不影响 pyecharts
    fig-align: center
    #fig-format: svg
    #fig-dpi: 400 # svg 时无效

comments:
  giscus:
    repo: wkevin/bitter-data

---

```{python}
import pyecharts.options as opts
from pyecharts.charts import Line, Grid
import pandas as pd
import numpy as np
from datetime import datetime as dt
```

```{python}
# 已经出了成绩的最新年份
scoredyear = "2023"
years = [f"{y}" for y in list(range(2019, int(scoredyear) + 1, 1))]
years_score = [f"[{y}]" for y in years]
print(years)
print(years_score)
```

```{python}
# 全局变量
g_toolbox_opts=opts.ToolboxOpts(
    feature=opts.ToolBoxFeatureOpts(
        # save_as_image = None, 仅保留保存图片按钮
        restore=None,
        data_view=None,
        data_zoom=None,
        magic_type=None,
        # brush = opts.BrushOpts(),
    )
),

def get_title(titlestr:str=""):
    return opts.TitleOpts(
        title=titlestr,
        title_link="https://wkevin.github.io/bitter-data",
        subtitle="https://wkevin.github.io/bitter-data",
        subtitle_link="https://wkevin.github.io/bitter-data",
        subtitle_textstyle_opts=opts.TextStyleOpts(font_size=12),
    )
```

```{python}
# 加载数据
df = pd.read_csv(f"./sz-zhongkao/data.csv", decimal=",")
l = len(df)

# 添加每年的排序
for y in years:
    _l = len(df[df[f"[{y}]"].notnull()])
    df = df.sort_values(by=f"[{y}]", ascending=False)

    zs = np.zeros(l)
    zs[:] = np.nan
    for i in range(0, _l, 1):
        zs[i] = i + 1

    df.insert(len(df.columns), y, zs)
(df)
```

## 学校排名

```{python}
# 筛选当前最新出了成绩的学校，当年没出成绩的新学校不参与排名
from pyecharts.commons.utils import JsCode

dfsort = df[df[scoredyear].notnull()][years + ["名称"]]
for y in years:
    dfsort["名称"] = dfsort["名称"] + "," + df[f"[{y}]"].astype(str)
dfsort.set_index(["名称"], inplace=True)
# dfsort = dfsort.sort_values(by='2022', ascending=True)
(dfsort)
```


```{python}
# | output: true
# | fig-align: center

l = (
    Line(init_opts=opts.InitOpts(width="100%"))
    .add_xaxis(dfsort.columns.to_list())
    .set_global_opts(
        title_opts=get_title("深圳高中排名演变图"),
        xaxis_opts=opts.AxisOpts(
            type_="category", position="top", boundary_gap=False  # 离散值
        ),
        yaxis_opts=opts.AxisOpts(
            # is_show=False,
            is_inverse=True,
            min_=1,
            max_=len(dfsort.index),
            max_interval=10,
            boundary_gap=False,
        ),
        tooltip_opts=opts.TooltipOpts(
            trigger="item",  # item-鼠标在item上触发，axis-轴上触发
            # {a}：系列名。
            # {b}：数据名。
            # {c}：数据值。
            # {@xxx}：数据中名为 'xxx' 的维度的值，如 {@product} 表示名为 'product'` 的维度的值。
            # {@[n]}：数据中维度 n 的值，如{@[3]}` 表示维度 3 的值，从 0 开始计数。
            formatter=JsCode(
                """function (param) {
                    ret = param.seriesName.split(',')[0] + '<br/>';
                    ret += param.value + ',' + param.seriesName.split(',')[param.dataIndex+1].toString().slice(0,-2) ;
                    return  ret;
                }"""
            ),
        ),
        toolbox_opts=g_toolbox_opts,
        legend_opts=opts.LegendOpts(is_show=False),
    )
)

for name, row in dfsort.iterrows():
    l.add_yaxis(
        series_name=name.replace("（一）", ""),
        y_axis=row,
        z_level=1,
        is_symbol_show=True,
        symbol="circle",
        symbol_size=8,
        label_opts=opts.LabelOpts(
            is_show=False,
        ),
    )
    # 添加校名
    row[:-1] = None  # 只保留最后一年的数值，其他列置 non
    l.add_yaxis(
        series_name=name.split(",")[0].replace("（一）", ""),
        y_axis=row,
        z_level=0,  # 放在上一个 y 值的底下
        is_symbol_show=True,
        symbol="circle",
        symbol_size=8,
        label_opts=opts.LabelOpts(
            # is_show=False,
            formatter="{a}",  # 用 series_name 作为 label
            position="right"
        ),
    )


grid = Grid(
    init_opts=opts.InitOpts(
        width="100%",
        height="1600px",
        renderer='svg',
        bg_color='white'
    )
)

grid.add(
    l,
    opts.GridOpts(
        pos_top=80,
        pos_right="38.2%",
    ),
    is_control_axis_index=True,
)
grid.render_notebook()

```


## 招生人数

当前 2023 年录取分尚未发布，所以以 2022 年录取分数排序，新学校排在末尾。

待 2023 年录取分发布后，更新为 2023 年分数排序。

```{python}
# dfsum: 累积数据
# 全部学校参与计算招生人数
dfsum = df.sort_values(by=f"[{scoredyear}]", ascending=False)
dfsum = dfsum[["名称", "招生人数"]]
dfsum["名称"] = dfsum["名称"].str.replace("（一）", "")
dfsum["累计"] = dfsum["招生人数"].cumsum(axis=0)

dfsum
```


```{python}
from pyecharts import types
from pyecharts import options as opts
from pyecharts.charts import Bar, Grid, Sunburst

```

### 2023 AC 类招生人数

```{python}
# | output: true

# 以 2022 录取分做升序 —— pyecharts 绘图是逆序的
# df.iloc[::-1] 可以实现逆序

bar = (
    Bar(init_opts=opts.InitOpts())
    .add_dataset(
        source=[dfsum.columns.values.tolist()] + dfsum.iloc[::-1].values.tolist()
    )
    .add_yaxis(
        series_name="",
        y_axis=[], # add_dataset() 中已给出，会自动选择第1、2列，此处可置空
        label_opts=opts.LabelOpts(position="right"),
    )
    .set_global_opts(
        title_opts=get_title("2023 AC 类招生人数对比图"),
        legend_opts=opts.LegendOpts(is_show=False),
        xaxis_opts=opts.AxisOpts(name=""),
        yaxis_opts=opts.AxisOpts(type_="category"),
        toolbox_opts=g_toolbox_opts,
        visualmap_opts=opts.VisualMapOpts(
            orient="horizontal",
            pos_left="center",
            min_=80,
            max_=1700,
            dimension=1,
            range_color=["#D7DA8B", "#E15457"],
        ),
    )
)

grid = Grid(
    init_opts=opts.InitOpts(
        width="100%",
        height="1600px",
        renderer='svg',
        bg_color='white'
    )
)

grid.add(
    bar,
    opts.GridOpts(
        pos_left="50%",
        # pos_right='20px',
    ),
    is_control_axis_index=True,
)
grid.render_notebook()
```

### 等位图

```{python}
total = 60000

data = []
idx = 0
sum = 0
for name, row in dfsum.iterrows():
    sum += row["招生人数"]
    idx += 1
    data.append({"name": str(idx) + "_" + row["名称"], "value": row["招生人数"]})


data.append({"name": "缺口", "value": total - sum})
data
```

```{python}
data_grade = [
    {"name": "A+", "value": total * 0.05},
    {"name": "A", "value": total * 0.2},
    {"name": "B+", "value": total * 0.25},
    {"name": "B", "value": total * 0.25},
    {"name": "C+", "value": total * 0.2},
    {"name": "C", "value": total * 0.05},
]
data_grade
```

预估假设：

2023 年 12+ 万报名，按 AC:D = 1:1 预估，AC 类考生约 6 万。

```{python}
# | output: true

(
    Sunburst(init_opts=opts.InitOpts(width="100%",height="600px",renderer='svg',bg_color='white'))
    .add(
        "",
        data_pair=data_grade,
        highlight_policy="ancestor",
        radius=[0, "95%"],
        sort_=types.JsCode("null"),
        levels=[
            {},
            {"r0": "15%", "r": "23%", "label": {"align": "right"}},
        ],
        label_opts=opts.LabelOpts(font_size=10, font_weight="bold"),
    )
    .add(
        "",
        data_pair=data,
        highlight_policy="ancestor",
        radius=[0, "95%"],
        sort_=types.JsCode("null"),
        levels=[
            {},
            {"r0": "25%", "r": "100%", "label": {"align": "right"}},
        ],
        label_opts=opts.LabelOpts(
            # formatter + rich = 可实现更丰富的自定义显示
            formatter='{schoolname| {b}}',
            rich={
                "schoolname": {"fontSize":'0.5em'}
            },
        ),
    )
    .set_global_opts(
        title_opts=get_title("2023 AC 类招生人数累计图"),
        toolbox_opts=g_toolbox_opts,        
        legend_opts=opts.LegendOpts(is_show=False),
    )
    .render_notebook()
)
```

D 类就不作图了，看着太扎心了！

