---
format: 
  html:
    title: "广东高考"
    code-fold: false
    echo: false
    output: false
    toc-expand: 2
    toc-title: 目录
    fig-align: center
---

# 广东高考

数据源自：

- 广东省教育考试院
  - [关于公布广东省2023年普通高考成绩各分数段数据的通知](https://eea.gd.gov.cn/zwgk_tjxx/content/post_4207233.html)
  - [关于公布广东省2022年普通高考成绩各分数段数据的通知](https://eea.gd.gov.cn/zwgk_tjxx/content/post_3986282.html)

## 2023 年

### 分科人数


```{python}
import pandas as pd
import numpy as np

```

2023年广东省普通高考应考考生：

- 报考本科：751848 人
- 报考专科：786461 人

不做这个表还真不知道有 12 类考试方向，不知道书法、广播这些赛道情况如何？是否拥挤？


```{python}
dfc = pd.DataFrame(
    data={
        "普通类(历史)": [289685, 289685],
        "普通类(物理)": [409604, 409604],
        "高考体育类": [6992, 13389],
        "高考美术类": [22565, 35703],
        "高考音乐学类": [6021, 9217],
        "高考音乐表演-声乐类": [6393, 9639],
        "高考音乐表演-器乐类": [5755, 9150],
        "高考舞蹈类": [1421, 2596],
        "高考广播电视编导类": [1291, 3661],
        "高考书法类": [506, 1145],
        "高考播音与主持普通话类": [1444, 2430],
        "高考播音与主持粤语类": [171, 242],
    },
    index=["本科", "专科"],
)
dfc
```

```{python}
from pyecharts import options as opts
from pyecharts.charts import Bar
from pyecharts.globals import ThemeType

```

```{python}
# | output: true

dft = dfc.T
(  # 加 () 才能链式调用放在行首，否则需要 ).add...
    Bar(init_opts=opts.InitOpts(width="100%"))
    .add_xaxis(dft.index.to_list())
    .add_yaxis("本科", dft["本科"].to_list())
    .add_yaxis("专科", dft["专科"].to_list())
    .set_global_opts(
        title_opts=opts.TitleOpts(
            title="2023 广东高考人数", subtitle="https://wkevin.github.io/bitter-data/"
        ),
        xaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(rotate=25)),
        yaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(formatter="{value}")),
        toolbox_opts=opts.ToolboxOpts(
            feature=opts.ToolBoxFeatureOpts(
                # save_as_image = None, 仅保留保存图片按钮
                restore=None,
                data_view=None,
                data_zoom=None,
                magic_type=None,
                # brush = opts.BrushOpts(),
            )
        ),
        # datazoom_opts=opts.DataZoomOpts(
        #   type_='inside',
        #   orient="vertical",
        #   range_start = 0,
        #   range_end = 100),
    )
    .set_series_opts(
        label_opts=opts.LabelOpts(
            position="top", rotate=90, horizontal_align="left", vertical_align="center"
        )
    )
    .render_notebook()
)


```


### 分数段人数

下面详细统计一下 12 类中人数最多的两类普通类的分数段人数。

首先恭喜和祝福 31 位文科状元，和 27 位理科状元，他们值得单独列一行。


```{python}
def group_data(df, group_num=10):
    """按 10 分一个分数段进行重组"""
    dffa = pd.DataFrame(columns=["分数段", "本科-人数", "专科-人数"])
    dffl = pd.DataFrame(columns=["分数段", "本科-人数", "专科-人数"])

    # 状元单独一行，太牛啦！
    dffa.loc[0] = [
        f"{df[0:1].index.values[0]}",
        df[0:1]["本科-人数"].values[0],
        df[0:1]["专科-人数"].values[0],
    ]

    _len = len(df.index)
    for i in range(int(_len / group_num)):
        _dfs = df[i * group_num + 1 : (i + 1) * group_num + 1].sum()
        _dfi = df[i * group_num + 1 : (i + 1) * group_num + 1].index.to_list()
        try:
            dffl.loc[0] = [f"{_dfi[-1]}-{_dfi[0]}", _dfs[0], _dfs[2]]
            dffa = pd.concat([dffl, dffa], axis=0)
        except Exception as e:
            print(f"{e},{_dfi}")
    return dffa.reset_index(drop=True)


```


```{python}
def group_bar(df, title):
    """对分数段数据生成 Bar，用户可以 render_notebook()

    放在本函数里面显示不了 —— why?
    """
    return (
        Bar(init_opts=opts.InitOpts(width="100%", height="600px"))
        .add_xaxis(df["分数段"].to_list())
        .add_yaxis("本科-人数", df["本科-人数"].to_list())
        .add_yaxis("专科-人数", df["专科-人数"].to_list())
        .reversal_axis()
        .set_series_opts(label_opts=opts.LabelOpts(position="right", font_size=8))
        .set_global_opts(
            title_opts=opts.TitleOpts(
                title=title,
                title_link="https://wkevin.github.io/bitter-data",
                subtitle="https://wkevin.github.io/bitter-data",
                subtitle_link="https://wkevin.github.io/bitter-data",
            ),
            xaxis_opts=opts.AxisOpts(name="招生人数"),
            yaxis_opts=opts.AxisOpts(
                name="",
                type_="category",
                name_location="start",
                axislabel_opts=opts.LabelOpts(interval=0, font_size=8),
            ),
            legend_opts=opts.LegendOpts(pos_right=30, orient="vertical"),
        )
    )


```

```{python}
# | output: true
# | fig-align: center

_df = group_data(pd.read_csv(f"./gd-gaokao/2023-history.csv", decimal=",", index_col=0))
group_bar(_df, title="2023 广东高考分数段人数（历史）").render_notebook()
```


```{python}
# | output: true
# | fig-align: center

_df = group_data(pd.read_csv(f"./gd-gaokao/2023-phy.csv", decimal=",", index_col=0))
group_bar(_df, title="2023 广东高考分数段人数（物理）").render_notebook()
```

历史类更接近正态分布，物理类高分更密集一些、更卷一些。

## 2022 年

2022 年广东高考：

- 历史类：272196 人
- 物理类：399216 人

### 分数段人数

恭喜 2022 年 5 位文科状元，和 6 位理科状元。

```{python}
# | output: true
# | fig-align: center

_df = group_data(pd.read_csv(f"./gd-gaokao/2022-history.csv", decimal=",", index_col=0))
group_bar(_df, title="2022 广东高考分数段人数（历史）").render_notebook()
```


```{python}
# | output: true
# | fig-align: center

_df = group_data(pd.read_csv(f"./gd-gaokao/2022-phy.csv", decimal=",", index_col=0))
group_bar(_df, title="2022 广东高考分数段人数（物理）").render_notebook()
```